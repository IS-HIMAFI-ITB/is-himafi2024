// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

//!original post from t3 boilerplate
// model Post {
//     id        Int      @id @default(autoincrement())
//     name      String
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     createdBy   User   @relation(fields: [createdById], references: [id])
//     createdById String

//     @@index([name])
// }

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
    ADMIN
    PESERTA
}

enum kehadiranType {
    HADIR
    MENYUSUL
    MENINGGALKAN
    MENYUSUL_DAN_MENINGGALKAN
    TIDAK_HADIR
}

enum jenisIzinType {
    LEMBAGA
    AGAMA
    AKADEMIK
    KELUARGA
    SAKIT
}

enum fisikType {
    SEHAT
    KURANG_SEHAT
    SAKIT
    BARU_PULIH
}

enum statusIzinType {
    PENDING
    DITERIMA
    DITOLAK
    HADIR
}

model User {
    id               String  @id @default(cuid())
    name             String? @unique
    nim              String? @unique
    password         String? @default("password")
    passwordOverride Boolean @default(true)
    role             Role    @default(PESERTA)

    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]

    sessions     Session[]
    submissions  Submission[]   @relation("submission")
    comments     Comment[]      @relation("comment")
    posts        Post[]
    Perizinan    Perizinan[]
    KondisiMassa KondisiMassa[]
}

model Day {
    id                   Int            @id @default(autoincrement())
    name                 String?
    sheetsCMSId          String?
    passwordAbsensi      String?
    isCurrent            Boolean        @default(true)
    isAcceptingPerizinan Boolean        @default(true)
    perizinan            Perizinan[]
    kondisiMassa         KondisiMassa[]
}

model Perizinan {
    id String @id @default(cuid())

    kehadiran         kehadiranType?
    jenisIzin         jenisIzinType?
    alasanIzin        String?
    kapanMenyusul     DateTime?
    kapanMeninggalkan DateTime?
    buktiIzin         String?

    statusIzin     statusIzinType @default(PENDING)
    isHadirAbsensi Boolean        @default(false)
    hadirAbsensiAt DateTime?

    createdAt   DateTime @default(now())
    createdBy   User     @relation(fields: [createdById], references: [id])
    createdById String
    day         Day?     @relation(fields: [dayId], references: [id])
    dayId       Int?
}

model KondisiMassa {
    id String @id @default(cuid())

    fisik     fisikType
    deskripsi String?
    kesiapan  Int?

    createdAt   DateTime @default(now())
    createdBy   User     @relation(fields: [createdById], references: [id])
    createdById String
    day         Day?     @relation(fields: [dayId], references: [id])
    dayId       Int?
}

model Post {
    id         Int     @id @default(autoincrement())
    judul      String?
    body       String?
    attachment String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String
}

model Tugas {
    id               String    @id @default(cuid())
    judul            String
    body             String?
    perintahMisi     String?
    attachment       String?
    deadline         DateTime?
    isTugasSpesial   Boolean   @default(false)
    hidden           Boolean   @default(false)
    targetNimPeserta String[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    submissions Submission[]
}

model Submission {
    id            String   @id @default(cuid())
    submissionUrl String?
    submissionKey String?
    score         Int?
    createdAt     DateTime @default(now())
    filename      String?
    hidden        Boolean  @default(false)

    feedback          Comment[]
    submissionTugas   Tugas     @relation(fields: [submissionTugasId], references: [id])
    submissionBy      User      @relation("submission", fields: [submissionById], references: [id])
    submissionById    String
    submissionTugasId String
}

model Comment {
    id                 Int        @id @default(autoincrement())
    text               String
    createdAt          DateTime   @default(now())
    submissionOrigin   Submission @relation(fields: [submissionOriginId], references: [id])
    createdBy          User       @relation("comment", fields: [createdById], references: [id])
    submissionOriginId String
    createdById        String
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
